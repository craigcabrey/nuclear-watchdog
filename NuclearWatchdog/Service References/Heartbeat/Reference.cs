//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuclearWatchdog.Heartbeat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://SWEN.755.Heartbeat", ConfigurationName="Heartbeat.IHeartbeat")]
    public interface IHeartbeat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SWEN.755.Heartbeat/IHeartbeat/Register", ReplyAction="http://SWEN.755.Heartbeat/IHeartbeat/RegisterResponse")]
        System.Tuple<bool, string> Register();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SWEN.755.Heartbeat/IHeartbeat/Register", ReplyAction="http://SWEN.755.Heartbeat/IHeartbeat/RegisterResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, string>> RegisterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SWEN.755.Heartbeat/IHeartbeat/Unregister", ReplyAction="http://SWEN.755.Heartbeat/IHeartbeat/UnregisterResponse")]
        void Unregister(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SWEN.755.Heartbeat/IHeartbeat/Unregister", ReplyAction="http://SWEN.755.Heartbeat/IHeartbeat/UnregisterResponse")]
        System.Threading.Tasks.Task UnregisterAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SWEN.755.Heartbeat/IHeartbeat/Beat", ReplyAction="http://SWEN.755.Heartbeat/IHeartbeat/BeatResponse")]
        bool Beat(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://SWEN.755.Heartbeat/IHeartbeat/Beat", ReplyAction="http://SWEN.755.Heartbeat/IHeartbeat/BeatResponse")]
        System.Threading.Tasks.Task<bool> BeatAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHeartbeatChannel : NuclearWatchdog.Heartbeat.IHeartbeat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HeartbeatClient : System.ServiceModel.ClientBase<NuclearWatchdog.Heartbeat.IHeartbeat>, NuclearWatchdog.Heartbeat.IHeartbeat {
        
        public HeartbeatClient() {
        }
        
        public HeartbeatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HeartbeatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HeartbeatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HeartbeatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Tuple<bool, string> Register() {
            return base.Channel.Register();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, string>> RegisterAsync() {
            return base.Channel.RegisterAsync();
        }
        
        public void Unregister(string id) {
            base.Channel.Unregister(id);
        }
        
        public System.Threading.Tasks.Task UnregisterAsync(string id) {
            return base.Channel.UnregisterAsync(id);
        }
        
        public bool Beat(string id) {
            return base.Channel.Beat(id);
        }
        
        public System.Threading.Tasks.Task<bool> BeatAsync(string id) {
            return base.Channel.BeatAsync(id);
        }
    }
}
